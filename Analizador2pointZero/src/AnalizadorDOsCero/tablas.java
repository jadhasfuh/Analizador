package AnalizadorDOsCero;

public class tablas {
	String [][] laperrona = 
		{
				{" "          	,"identificador"		,"id_ent"		,"id_dec"		,"id_cad"	,"id_cart"		,"("			,")","+","-","*","/","mod"	,"ala"	,"tallo","<",">","<=",">=","!=","==","!!","&","||","verdadero"	,"falso"		,"cambio"		,"caso"	,"si"					,"sino"					,"para"					,"mientras"				,"repeat"				,"hacer","endif","endfor","endmientras" ,"principal","clase","ent"	,"dec"	,"cart"	,"cad"	,"bool"	,"->",","				,"proc"	,"funcion"	,"finproc"	,"finfuncion"	,"endfin"	,"idproc"				,"idfuncion"	,"retornar"				,"$"	},	
				{"prog"			," "					," "			," "			," "		," "			," "			," "," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			," " 	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			,"principal clase id inicio crea sentencias finclase",	"clase id inicio crea sentencias finclase"			," "	," "," "," "," "," "," "," "," "," "," "," "	," "," "," "								," "	},															
				{"crea"			," "					," "			," "			," "		," "			," "			," "," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	,"dec crea",	"dec crea",	"dec crea",	"dec crea"				,"dec crea",	" "	," "		,"modulos crea"	,	"modulos crea"," "," "," "," "	," "," "								," "	},							
				{"dec"			," "					," "			," "			," "		," "			," "			," "," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," " 			," "		," "	,"ent identificador sigid ;",	 "dec id sigid ;"				,"cart id sigid ;"	,	 "cad id sigid ;","bool id sigid ;"," "," "," "," "," "," "	,"ç"," "," "	," "					," " 	},					
				{"sigid"		," "					," "			," "			," "		," "			," "			," "," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	," "	," "	," "	," "	," "	,"> L sigid"			,", identificador sigid"		," "			," "		," "		," "			," "," "," "," "					," "	},										
				{"modulos"		,"ç"					," "			," "			," "		," "			," "			," "," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			," "	,"ç" 					," "					,"ç"					,"ç"					,"ç"					," "	," "	," "	 ," "			," "		," "	,"ç"	,"ç"	,"ç"	,"ç"	,"ç"	," " ," "				,"procedimiento"	, 	"funcion","ç"			," "		," "		," "			," "	," "						," "	},				
				{"procedimiento"," "					," "			," "			," "		," "			," "			," "," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	," "	," "	," "	," "	," "	," " ," "				,"procedimiento idproc ( list-arg ) inicio sentencias finproc"			," "," "," "	," "," "," "," "					," "	},							
				{"funcion"      ," "					," "			," "			," "		," "			," "			," "," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	," "	," "	," "	," "	," "	," " ," "				," "	,"funcion idf ( list-arg ) tiporetorno inicio sentencias endf"		," "," "	," "," "," "," "					," "	},								
				{"tiporetorno"	," "					," "			," "			," "		," "			," "			," "," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	,"ent"	,"dec"	,"cart"	,"cad"	,"bool"	," " ," " 				," " 	," " 		," " 		," " 			," " 		," " 		," " 			," " 								," "	},		
				{"list-arg"		," "					," "			," "			," "		," "			," "			,"ç"," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	,"ent identificador siglist","dec identificador siglist"		,"cart identificador siglist","cad identificador siglist","bool identificador siglist"	," "," "," "," "," "," "," "," "," "," "," "},												
				{"siglist"		," "					," "			," "			," "		," "			," "			,"ç"," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	," "	," "	," "	," "	," "	," " ,"list-arg"		," "	," "		," "		," "			," "		," "					," "			," "					," "	},
				{"list-param"	,"L sig-param"			,"L sig-param"	,"L sig-param","L sig-param","L sig-param"	,"L sig-param"	,"ç"," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			,"L sig-param"	,"L sig-param"	," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	," "	," "	," "	," "	," "	," " ," "				," "	," "		," "		," "			," "		," "					,"L sig-param"	," "					," "	}, 			
				{"sig-param"	," "					," "			," "			," "		," "			," "			,"ç"," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	," "	," "	," "	," "	," "	," " ,", L sig-param"	," "	," "		," "		," "			," "		," "					," "			," "					," " 	},										
				{"sentencias"	,"sentencia sentencias"	," "			," "			," "		," "			," "			," "," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			," "	,"sentencia sentencias"	," "					,"sentencia sentencias"	,"sentencia sentencias"	, "sentencia sentencias"," "	,"ç"	,"ç"	 ,"ç"			," "		," "	," "	," "	," "	," "	," "	," " ," "				," "	," "		,"ç"		,"ç"			,"ç"		,"sentencia sentencias"	," "			,"sentencia sentencias"	,"ç"	},	
				{"sentencia"	,"asigna;"				," "			," "			," "		," "			," "			," "," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			,"cambio ( id ) inicio caso ( L ) ?: sentencias sigcaso default ?: sentencias ruptura ; fin"," ","si L inicio sentencias sino endif"," ","para L do sentencias endpara","mientras L do sentencias endmientras","repeat sentencias until L ;"," "," "," "," "," "," ","dec sentencias","dec sentencias","dec sentencias"  ,"dec sentencias","dec sentencias"," "," "," "," "," "," "," "	,"asigna;","asigna;"," "},
				{"sigcaso"		," "					," "			," "			," "		," "			," "			," "," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			,"caso ( L ) ?: sentencias ruptura ; sigcaso" 			," "					," "					," "					," " 	," " 	," " 	," " 			," "		," "	," " 	," "	," "	," "	," "	," " ," "				," "	," "		," "		," "			," "		," "	 				," "			," "					," "	}, 																												
				{"sigif"		," "					," "			," "			," "		," "			," "			," "," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			," "	," "					,"sino sentencias"		," "					," "					," "					," "	," "	," "	 ," "	 		," "		," "	," "	," "	," "	," "	," "	," "	," " 			," "	," "		," "		," "			," "		," "					," "			," "					," "	},																			
				{"asigna"		,"id -> L"				," "			," "			," "		," "			," "			," "," "," "," "," "," "	," "	," "	," "," "," " ," " ," " ," " ," " ," "," " ," "			," "			," "			," "	," "					," "					," "					," "					," "					," "	," "	," "	 ," "	 		," "		," "	," "	," "	," "	," "	," "	," "	," " 			," "	," "		," "		," "			," "		,"idproc ( list-param )"," "			,"retornar L"			," "	},				
				{"L"			,"R L’",	"R L’",	"R L’",	"R L’",	"R L’",	"R L’",							"R L’",	"R L’",							!!L",			RL’",	RL’",																											RL’			
				{"L’"			,							"ç",	"ç",	"ç",	"ç",	"ç",	"ç",			"ç",	"ç",	"ç",	"ç",	ç",	ç",		&RL’",	||RL’",										ç",																					ç	
				{"R"			,"E R’",	"E R’",	"E R’",	"E R’",	"E R’",	"E R’",							"E R’",	"E R’",								ç",	ç",	ER’",	ER’",								ç",																			ER’		ç	
				{"R’"			,							"ç",	"ç",	"ç",	"ç",	"ç",	"ç",			"< E",	"> E",	"<= E",	">= E",	!=E",	==E",		ç",	ç",										ç",																					ç	
				{"E"			,"T E’",	"T E’",	"T E’",	"T E’",	"T E’",	"T E’",							"T E’",	"T E’",										TE’",	TE’",																											TE’			
				{"E’"			,							"ç",	"+ T E’",	"-TE’",	"ç",	"ç",	"ç",			"ç",	"ç",	"ç",	"ç",	ç",	ç",		ç",	ç",										ç",																					ç	
				{"T"			,"F T’",	"F T’",	"F T’",	"F T’",	"F T’",	"F T’",							"F T’",	"F T’",										FT’",	FT’",																											FT’			
				{"T’"			,							"ç",	"ç",	"ç",	"* F T’",	"/ F T’",	"mod F T'",			"ç",	"ç",	"ç",	ç",	ç",	ç",		ç",	ç",										ç",																					ç	
				{"F"			,"identificador",	"id_ent",	"id_dec",	"id_cad",	"id_cart",	"( L )",							"ala ( L )",	tallo(L)",										true",	false",																											idfuncion(list-param)			

}
